<?php

// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\ShippingLabel;

final class ShippingLabel
{
    private $transporterCode;
    private $labelType;
    private $maxWeight;
    private $maxDimensions;
    private $retailerPrice;
    private $purchasePrice;
    private $discount;
    private $shippingLabelCode;

    public function __construct(\BolCom\RetailerApi\Model\Transport\TransporterCode $transporterCode, string $labelType, string $maxWeight, string $maxDimensions, float $retailerPrice, float $purchasePrice, float $discount, float $shippingLabelCode)
    {
        $this->transporterCode = $transporterCode;
        $this->labelType = $labelType;
        $this->maxWeight = $maxWeight;
        $this->maxDimensions = $maxDimensions;
        $this->retailerPrice = $retailerPrice;
        $this->purchasePrice = $purchasePrice;
        $this->discount = $discount;
        $this->shippingLabelCode = $shippingLabelCode;
    }

    public function transporterCode(): \BolCom\RetailerApi\Model\Transport\TransporterCode
    {
        return $this->transporterCode;
    }

    public function labelType(): string
    {
        return $this->labelType;
    }

    public function maxWeight(): string
    {
        return $this->maxWeight;
    }

    public function maxDimensions(): string
    {
        return $this->maxDimensions;
    }

    public function retailerPrice(): float
    {
        return $this->retailerPrice;
    }

    public function purchasePrice(): float
    {
        return $this->purchasePrice;
    }

    public function discount(): float
    {
        return $this->discount;
    }

    public function shippingLabelCode(): float
    {
        return $this->shippingLabelCode;
    }

    public function withTransporterCode(\BolCom\RetailerApi\Model\Transport\TransporterCode $transporterCode): ShippingLabel
    {
        return new self($transporterCode, $this->labelType, $this->maxWeight, $this->maxDimensions, $this->retailerPrice, $this->purchasePrice, $this->discount, $this->shippingLabelCode);
    }

    public function withLabelType(string $labelType): ShippingLabel
    {
        return new self($this->transporterCode, $labelType, $this->maxWeight, $this->maxDimensions, $this->retailerPrice, $this->purchasePrice, $this->discount, $this->shippingLabelCode);
    }

    public function withMaxWeight(string $maxWeight): ShippingLabel
    {
        return new self($this->transporterCode, $this->labelType, $maxWeight, $this->maxDimensions, $this->retailerPrice, $this->purchasePrice, $this->discount, $this->shippingLabelCode);
    }

    public function withMaxDimensions(string $maxDimensions): ShippingLabel
    {
        return new self($this->transporterCode, $this->labelType, $this->maxWeight, $maxDimensions, $this->retailerPrice, $this->purchasePrice, $this->discount, $this->shippingLabelCode);
    }

    public function withRetailerPrice(float $retailerPrice): ShippingLabel
    {
        return new self($this->transporterCode, $this->labelType, $this->maxWeight, $this->maxDimensions, $retailerPrice, $this->purchasePrice, $this->discount, $this->shippingLabelCode);
    }

    public function withPurchasePrice(float $purchasePrice): ShippingLabel
    {
        return new self($this->transporterCode, $this->labelType, $this->maxWeight, $this->maxDimensions, $this->retailerPrice, $purchasePrice, $this->discount, $this->shippingLabelCode);
    }

    public function withDiscount(float $discount): ShippingLabel
    {
        return new self($this->transporterCode, $this->labelType, $this->maxWeight, $this->maxDimensions, $this->retailerPrice, $this->purchasePrice, $discount, $this->shippingLabelCode);
    }

    public function withShippingLabelCode(float $shippingLabelCode): ShippingLabel
    {
        return new self($this->transporterCode, $this->labelType, $this->maxWeight, $this->maxDimensions, $this->retailerPrice, $this->purchasePrice, $this->discount, $shippingLabelCode);
    }

    public static function fromArray(array $data): ShippingLabel
    {
        if (! isset($data['transporterCode']) || ! \is_string($data['transporterCode'])) {
            throw new \InvalidArgumentException("Key 'transporterCode' is missing in data array or is not a string");
        }

        $transporterCode = \BolCom\RetailerApi\Model\Transport\TransporterCode::fromName($data['transporterCode']);

        if (! isset($data['labelType']) || ! \is_string($data['labelType'])) {
            throw new \InvalidArgumentException("Key 'labelType' is missing in data array or is not a string");
        }

        $labelType = $data['labelType'];

        if (! isset($data['maxWeight']) || ! \is_string($data['maxWeight'])) {
            throw new \InvalidArgumentException("Key 'maxWeight' is missing in data array or is not a string");
        }

        $maxWeight = $data['maxWeight'];

        if (! isset($data['maxDimensions']) || ! \is_string($data['maxDimensions'])) {
            throw new \InvalidArgumentException("Key 'maxDimensions' is missing in data array or is not a string");
        }

        $maxDimensions = $data['maxDimensions'];

        if (! isset($data['retailerPrice']) || (! \is_float($data['retailerPrice']) && ! \is_int($data['retailerPrice']))) {
            throw new \InvalidArgumentException("Key 'retailerPrice' is missing in data array or is not a float");
        }

        $retailerPrice = $data['retailerPrice'];

        if (! isset($data['purchasePrice']) || (! \is_float($data['purchasePrice']) && ! \is_int($data['purchasePrice']))) {
            throw new \InvalidArgumentException("Key 'purchasePrice' is missing in data array or is not a float");
        }

        $purchasePrice = $data['purchasePrice'];

        if (! isset($data['discount']) || (! \is_float($data['discount']) && ! \is_int($data['discount']))) {
            throw new \InvalidArgumentException("Key 'discount' is missing in data array or is not a float");
        }

        $discount = $data['discount'];

        if (! isset($data['shippingLabelCode']) || (! \is_float($data['shippingLabelCode']) && ! \is_int($data['shippingLabelCode']))) {
            throw new \InvalidArgumentException("Key 'shippingLabelCode' is missing in data array or is not a float");
        }

        $shippingLabelCode = $data['shippingLabelCode'];

        return new self(
            $transporterCode,
            $labelType,
            $maxWeight,
            $maxDimensions,
            $retailerPrice,
            $purchasePrice,
            $discount,
            $shippingLabelCode
        );
    }
}
