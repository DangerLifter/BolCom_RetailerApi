<?php

// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\ProcessStatus;

final class EventType
{
    public const OPTIONS = [
        'CONFIRM_SHIPMENT' => 'CONFIRM_SHIPMENT',
        'CANCEL_ORDER' => 'CANCEL_ORDER',
        'CHANGE_TRANSPORT' => 'CHANGE_TRANSPORT',
        'HANDLE_RETURN_ITEM' => 'HANDLE_RETURN_ITEM',
        'CREATE_INBOUND' => 'CREATE_INBOUND',
    ];

    public const CONFIRM_SHIPMENT = 'CONFIRM_SHIPMENT';
    public const CANCEL_ORDER = 'CANCEL_ORDER';
    public const CHANGE_TRANSPORT = 'CHANGE_TRANSPORT';
    public const HANDLE_RETURN_ITEM = 'HANDLE_RETURN_ITEM';
    public const CREATE_INBOUND = 'CREATE_INBOUND';

    private $name;
    private $value;

    private function __construct(string $name)
    {
        $this->name = $name;
        $this->value = self::OPTIONS[$name];
    }

    public static function CONFIRM_SHIPMENT(): self
    {
        return new self('CONFIRM_SHIPMENT');
    }

    public static function CANCEL_ORDER(): self
    {
        return new self('CANCEL_ORDER');
    }

    public static function CHANGE_TRANSPORT(): self
    {
        return new self('CHANGE_TRANSPORT');
    }

    public static function HANDLE_RETURN_ITEM(): self
    {
        return new self('HANDLE_RETURN_ITEM');
    }

    public static function CREATE_INBOUND(): self
    {
        return new self('CREATE_INBOUND');
    }

    public static function fromName(string $value): self
    {
        if (! isset(self::OPTIONS[$value])) {
            throw new \InvalidArgumentException('Unknown enum name given');
        }

        return self::{$value}();
    }

    public static function fromValue($value): self
    {
        foreach (self::OPTIONS as $name => $v) {
            if ($v === $value) {
                return self::{$name}();
            }
        }

        throw new \InvalidArgumentException('Unknown enum value given');
    }

    public function equals(EventType $other): bool
    {
        return \get_class($this) === \get_class($other) && $this->name === $other->name;
    }

    public function name(): string
    {
        return $this->name;
    }

    public function value()
    {
        return $this->value;
    }

    public function __toString(): string
    {
        return $this->name;
    }

    public function toString(): string
    {
        return $this->name;
    }
}
