<?php

// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\Rma;

final class HandlingResult
{
    public const OPTIONS = [
        'RETURN_RECEIVED' => 0,
        'EXCHANGE_PRODUCT' => 1,
        'RETURN_DOES_NOT_MEET_CONDITIONS' => 2,
        'REPAIR_PRODUCT' => 3,
        'CUSTOMER_KEEPS_PRODUCT_PAID' => 4,
        'STILL_APPROVED' => 5,
    ];

    public const RETURN_RECEIVED = 0;
    public const EXCHANGE_PRODUCT = 1;
    public const RETURN_DOES_NOT_MEET_CONDITIONS = 2;
    public const REPAIR_PRODUCT = 3;
    public const CUSTOMER_KEEPS_PRODUCT_PAID = 4;
    public const STILL_APPROVED = 5;

    private $name;
    private $value;

    private function __construct(string $name)
    {
        $this->name = $name;
        $this->value = self::OPTIONS[$name];
    }

    public static function RETURN_RECEIVED(): self
    {
        return new self('RETURN_RECEIVED');
    }

    public static function EXCHANGE_PRODUCT(): self
    {
        return new self('EXCHANGE_PRODUCT');
    }

    public static function RETURN_DOES_NOT_MEET_CONDITIONS(): self
    {
        return new self('RETURN_DOES_NOT_MEET_CONDITIONS');
    }

    public static function REPAIR_PRODUCT(): self
    {
        return new self('REPAIR_PRODUCT');
    }

    public static function CUSTOMER_KEEPS_PRODUCT_PAID(): self
    {
        return new self('CUSTOMER_KEEPS_PRODUCT_PAID');
    }

    public static function STILL_APPROVED(): self
    {
        return new self('STILL_APPROVED');
    }

    public static function fromName(string $value): self
    {
        if (! isset(self::OPTIONS[$value])) {
            throw new \InvalidArgumentException('Unknown enum name given');
        }

        return self::{$value}();
    }

    public static function fromValue($value): self
    {
        foreach (self::OPTIONS as $name => $v) {
            if ($v === $value) {
                return self::{$name}();
            }
        }

        throw new \InvalidArgumentException('Unknown enum value given');
    }

    public function equals(HandlingResult $other): bool
    {
        return \get_class($this) === \get_class($other) && $this->name === $other->name;
    }

    public function name(): string
    {
        return $this->name;
    }

    public function value()
    {
        return $this->value;
    }

    public function __toString(): string
    {
        return $this->name;
    }

    public function toString(): string
    {
        return $this->name;
    }
}
