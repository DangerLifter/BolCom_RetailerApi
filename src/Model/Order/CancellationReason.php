<?php

// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\Order;

final class CancellationReason
{
    public const OPTIONS = [
        'OUT_OF_STOCK' => 0,
        'REQUESTED_BY_CUSTOMER' => 1,
        'BAD_CONDITION' => 2,
        'HIGHER_SHIPCOST' => 3,
        'INCORRECT_PRICE' => 4,
        'NOT_AVAIL_IN_TIME' => 5,
        'NO_BOL_GUARANTEE' => 6,
        'ORDERED_TWICE' => 7,
        'RETAIN_ITEM' => 8,
        'TECH_ISSUE' => 9,
        'UNFINDABLE_ITEM' => 10,
        'OTHER' => 11,
    ];

    public const OUT_OF_STOCK = 0;
    public const REQUESTED_BY_CUSTOMER = 1;
    public const BAD_CONDITION = 2;
    public const HIGHER_SHIPCOST = 3;
    public const INCORRECT_PRICE = 4;
    public const NOT_AVAIL_IN_TIME = 5;
    public const NO_BOL_GUARANTEE = 6;
    public const ORDERED_TWICE = 7;
    public const RETAIN_ITEM = 8;
    public const TECH_ISSUE = 9;
    public const UNFINDABLE_ITEM = 10;
    public const OTHER = 11;

    private $name;
    private $value;

    private function __construct(string $name)
    {
        $this->name = $name;
        $this->value = self::OPTIONS[$name];
    }

    public static function OUT_OF_STOCK(): self
    {
        return new self('OUT_OF_STOCK');
    }

    public static function REQUESTED_BY_CUSTOMER(): self
    {
        return new self('REQUESTED_BY_CUSTOMER');
    }

    public static function BAD_CONDITION(): self
    {
        return new self('BAD_CONDITION');
    }

    public static function HIGHER_SHIPCOST(): self
    {
        return new self('HIGHER_SHIPCOST');
    }

    public static function INCORRECT_PRICE(): self
    {
        return new self('INCORRECT_PRICE');
    }

    public static function NOT_AVAIL_IN_TIME(): self
    {
        return new self('NOT_AVAIL_IN_TIME');
    }

    public static function NO_BOL_GUARANTEE(): self
    {
        return new self('NO_BOL_GUARANTEE');
    }

    public static function ORDERED_TWICE(): self
    {
        return new self('ORDERED_TWICE');
    }

    public static function RETAIN_ITEM(): self
    {
        return new self('RETAIN_ITEM');
    }

    public static function TECH_ISSUE(): self
    {
        return new self('TECH_ISSUE');
    }

    public static function UNFINDABLE_ITEM(): self
    {
        return new self('UNFINDABLE_ITEM');
    }

    public static function OTHER(): self
    {
        return new self('OTHER');
    }

    public static function fromName(string $value): self
    {
        if (! isset(self::OPTIONS[$value])) {
            throw new \InvalidArgumentException('Unknown enum name given');
        }

        return self::{$value}();
    }

    public static function fromValue($value): self
    {
        foreach (self::OPTIONS as $name => $v) {
            if ($v === $value) {
                return self::{$name}();
            }
        }

        throw new \InvalidArgumentException('Unknown enum value given');
    }

    public function equals(CancellationReason $other): bool
    {
        return \get_class($this) === \get_class($other) && $this->name === $other->name;
    }

    public function name(): string
    {
        return $this->name;
    }

    public function value()
    {
        return $this->value;
    }

    public function __toString(): string
    {
        return $this->name;
    }

    public function toString(): string
    {
        return $this->name;
    }
}
