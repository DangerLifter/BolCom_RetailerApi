<?php

// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\Customer;

final class CustomerDetails
{
    private $salutationCode;
    private $firstName;
    private $surName;
    private $streetName;
    private $houseNumber;
    private $houseNumberExtended;
    private $addressSupplement;
    private $extraAddressInformation;
    private $zipCode;
    private $city;
    private $countryCode;
    private $email;
    private $deliveryPhoneNumber;
    private $company;
    private $vatNumber;

    public function __construct(string $salutationCode, string $firstName, string $surName, string $streetName, string $houseNumber, string $houseNumberExtended, string $addressSupplement, string $extraAddressInformation, string $zipCode, string $city, string $countryCode, string $email, string $deliveryPhoneNumber, string $company, string $vatNumber)
    {
        $this->salutationCode = $salutationCode;
        $this->firstName = $firstName;
        $this->surName = $surName;
        $this->streetName = $streetName;
        $this->houseNumber = $houseNumber;
        $this->houseNumberExtended = $houseNumberExtended;
        $this->addressSupplement = $addressSupplement;
        $this->extraAddressInformation = $extraAddressInformation;
        $this->zipCode = $zipCode;
        $this->city = $city;
        $this->countryCode = $countryCode;
        $this->email = $email;
        $this->deliveryPhoneNumber = $deliveryPhoneNumber;
        $this->company = $company;
        $this->vatNumber = $vatNumber;
    }

    public function salutationCode(): string
    {
        return $this->salutationCode;
    }

    public function firstName(): string
    {
        return $this->firstName;
    }

    public function surName(): string
    {
        return $this->surName;
    }

    public function streetName(): string
    {
        return $this->streetName;
    }

    public function houseNumber(): string
    {
        return $this->houseNumber;
    }

    public function houseNumberExtended(): string
    {
        return $this->houseNumberExtended;
    }

    public function addressSupplement(): string
    {
        return $this->addressSupplement;
    }

    public function extraAddressInformation(): string
    {
        return $this->extraAddressInformation;
    }

    public function zipCode(): string
    {
        return $this->zipCode;
    }

    public function city(): string
    {
        return $this->city;
    }

    public function countryCode(): string
    {
        return $this->countryCode;
    }

    public function email(): string
    {
        return $this->email;
    }

    public function deliveryPhoneNumber(): string
    {
        return $this->deliveryPhoneNumber;
    }

    public function company(): string
    {
        return $this->company;
    }

    public function vatNumber(): string
    {
        return $this->vatNumber;
    }

    public function withSalutationCode(string $salutationCode): CustomerDetails
    {
        return new self($salutationCode, $this->firstName, $this->surName, $this->streetName, $this->houseNumber, $this->houseNumberExtended, $this->addressSupplement, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->deliveryPhoneNumber, $this->company, $this->vatNumber);
    }

    public function withFirstName(string $firstName): CustomerDetails
    {
        return new self($this->salutationCode, $firstName, $this->surName, $this->streetName, $this->houseNumber, $this->houseNumberExtended, $this->addressSupplement, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->deliveryPhoneNumber, $this->company, $this->vatNumber);
    }

    public function withSurName(string $surName): CustomerDetails
    {
        return new self($this->salutationCode, $this->firstName, $surName, $this->streetName, $this->houseNumber, $this->houseNumberExtended, $this->addressSupplement, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->deliveryPhoneNumber, $this->company, $this->vatNumber);
    }

    public function withStreetName(string $streetName): CustomerDetails
    {
        return new self($this->salutationCode, $this->firstName, $this->surName, $streetName, $this->houseNumber, $this->houseNumberExtended, $this->addressSupplement, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->deliveryPhoneNumber, $this->company, $this->vatNumber);
    }

    public function withHouseNumber(string $houseNumber): CustomerDetails
    {
        return new self($this->salutationCode, $this->firstName, $this->surName, $this->streetName, $houseNumber, $this->houseNumberExtended, $this->addressSupplement, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->deliveryPhoneNumber, $this->company, $this->vatNumber);
    }

    public function withHouseNumberExtended(string $houseNumberExtended): CustomerDetails
    {
        return new self($this->salutationCode, $this->firstName, $this->surName, $this->streetName, $this->houseNumber, $houseNumberExtended, $this->addressSupplement, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->deliveryPhoneNumber, $this->company, $this->vatNumber);
    }

    public function withAddressSupplement(string $addressSupplement): CustomerDetails
    {
        return new self($this->salutationCode, $this->firstName, $this->surName, $this->streetName, $this->houseNumber, $this->houseNumberExtended, $addressSupplement, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->deliveryPhoneNumber, $this->company, $this->vatNumber);
    }

    public function withExtraAddressInformation(string $extraAddressInformation): CustomerDetails
    {
        return new self($this->salutationCode, $this->firstName, $this->surName, $this->streetName, $this->houseNumber, $this->houseNumberExtended, $this->addressSupplement, $extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->deliveryPhoneNumber, $this->company, $this->vatNumber);
    }

    public function withZipCode(string $zipCode): CustomerDetails
    {
        return new self($this->salutationCode, $this->firstName, $this->surName, $this->streetName, $this->houseNumber, $this->houseNumberExtended, $this->addressSupplement, $this->extraAddressInformation, $zipCode, $this->city, $this->countryCode, $this->email, $this->deliveryPhoneNumber, $this->company, $this->vatNumber);
    }

    public function withCity(string $city): CustomerDetails
    {
        return new self($this->salutationCode, $this->firstName, $this->surName, $this->streetName, $this->houseNumber, $this->houseNumberExtended, $this->addressSupplement, $this->extraAddressInformation, $this->zipCode, $city, $this->countryCode, $this->email, $this->deliveryPhoneNumber, $this->company, $this->vatNumber);
    }

    public function withCountryCode(string $countryCode): CustomerDetails
    {
        return new self($this->salutationCode, $this->firstName, $this->surName, $this->streetName, $this->houseNumber, $this->houseNumberExtended, $this->addressSupplement, $this->extraAddressInformation, $this->zipCode, $this->city, $countryCode, $this->email, $this->deliveryPhoneNumber, $this->company, $this->vatNumber);
    }

    public function withEmail(string $email): CustomerDetails
    {
        return new self($this->salutationCode, $this->firstName, $this->surName, $this->streetName, $this->houseNumber, $this->houseNumberExtended, $this->addressSupplement, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $email, $this->deliveryPhoneNumber, $this->company, $this->vatNumber);
    }

    public function withDeliveryPhoneNumber(string $deliveryPhoneNumber): CustomerDetails
    {
        return new self($this->salutationCode, $this->firstName, $this->surName, $this->streetName, $this->houseNumber, $this->houseNumberExtended, $this->addressSupplement, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $deliveryPhoneNumber, $this->company, $this->vatNumber);
    }

    public function withCompany(string $company): CustomerDetails
    {
        return new self($this->salutationCode, $this->firstName, $this->surName, $this->streetName, $this->houseNumber, $this->houseNumberExtended, $this->addressSupplement, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->deliveryPhoneNumber, $company, $this->vatNumber);
    }

    public function withVatNumber(string $vatNumber): CustomerDetails
    {
        return new self($this->salutationCode, $this->firstName, $this->surName, $this->streetName, $this->houseNumber, $this->houseNumberExtended, $this->addressSupplement, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->deliveryPhoneNumber, $this->company, $vatNumber);
    }

    public static function fromArray(array $data): CustomerDetails
    {
        if (! isset($data['salutationCode']) || ! \is_string($data['salutationCode'])) {
            throw new \InvalidArgumentException("Key 'salutationCode' is missing in data array or is not a string");
        }

        $salutationCode = $data['salutationCode'];

        if (! isset($data['firstName']) || ! \is_string($data['firstName'])) {
            throw new \InvalidArgumentException("Key 'firstName' is missing in data array or is not a string");
        }

        $firstName = $data['firstName'];

        if (! isset($data['surName']) || ! \is_string($data['surName'])) {
            throw new \InvalidArgumentException("Key 'surName' is missing in data array or is not a string");
        }

        $surName = $data['surName'];

        if (! isset($data['streetName']) || ! \is_string($data['streetName'])) {
            throw new \InvalidArgumentException("Key 'streetName' is missing in data array or is not a string");
        }

        $streetName = $data['streetName'];

        if (! isset($data['houseNumber']) || ! \is_string($data['houseNumber'])) {
            throw new \InvalidArgumentException("Key 'houseNumber' is missing in data array or is not a string");
        }

        $houseNumber = $data['houseNumber'];

        if (! isset($data['houseNumberExtended']) || ! \is_string($data['houseNumberExtended'])) {
            throw new \InvalidArgumentException("Key 'houseNumberExtended' is missing in data array or is not a string");
        }

        $houseNumberExtended = $data['houseNumberExtended'];

        if (! isset($data['addressSupplement']) || ! \is_string($data['addressSupplement'])) {
            throw new \InvalidArgumentException("Key 'addressSupplement' is missing in data array or is not a string");
        }

        $addressSupplement = $data['addressSupplement'];

        if (! isset($data['extraAddressInformation']) || ! \is_string($data['extraAddressInformation'])) {
            throw new \InvalidArgumentException("Key 'extraAddressInformation' is missing in data array or is not a string");
        }

        $extraAddressInformation = $data['extraAddressInformation'];

        if (! isset($data['zipCode']) || ! \is_string($data['zipCode'])) {
            throw new \InvalidArgumentException("Key 'zipCode' is missing in data array or is not a string");
        }

        $zipCode = $data['zipCode'];

        if (! isset($data['city']) || ! \is_string($data['city'])) {
            throw new \InvalidArgumentException("Key 'city' is missing in data array or is not a string");
        }

        $city = $data['city'];

        if (! isset($data['countryCode']) || ! \is_string($data['countryCode'])) {
            throw new \InvalidArgumentException("Key 'countryCode' is missing in data array or is not a string");
        }

        $countryCode = $data['countryCode'];

        if (! isset($data['email']) || ! \is_string($data['email'])) {
            throw new \InvalidArgumentException("Key 'email' is missing in data array or is not a string");
        }

        $email = $data['email'];

        if (! isset($data['deliveryPhoneNumber']) || ! \is_string($data['deliveryPhoneNumber'])) {
            throw new \InvalidArgumentException("Key 'deliveryPhoneNumber' is missing in data array or is not a string");
        }

        $deliveryPhoneNumber = $data['deliveryPhoneNumber'];

        if (! isset($data['company']) || ! \is_string($data['company'])) {
            throw new \InvalidArgumentException("Key 'company' is missing in data array or is not a string");
        }

        $company = $data['company'];

        if (! isset($data['vatNumber']) || ! \is_string($data['vatNumber'])) {
            throw new \InvalidArgumentException("Key 'vatNumber' is missing in data array or is not a string");
        }

        $vatNumber = $data['vatNumber'];

        return new self(
            $salutationCode,
            $firstName,
            $surName,
            $streetName,
            $houseNumber,
            $houseNumberExtended,
            $addressSupplement,
            $extraAddressInformation,
            $zipCode,
            $city,
            $countryCode,
            $email,
            $deliveryPhoneNumber,
            $company,
            $vatNumber
        );
    }
}
