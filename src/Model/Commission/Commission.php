<?php

// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\Commission;

final class Commission
{
    private $ean;
    private $condition;
    private $price;
    private $fixedAmound;
    private $percentage;
    private $totalCost;
    private $totalCostWithoutReduction;
    private $reduction;

    public function __construct(\BolCom\RetailerApi\Model\Offer\Ean $ean, \BolCom\RetailerApi\Model\Offer\Condition $condition, \BolCom\RetailerApi\Model\CurrencyAmount $price, \BolCom\RetailerApi\Model\CurrencyAmount $fixedAmound, float $percentage, \BolCom\RetailerApi\Model\CurrencyAmount $totalCost, \BolCom\RetailerApi\Model\CurrencyAmount $totalCostWithoutReduction, array $reduction)
    {
        $this->ean = $ean;
        $this->condition = $condition;
        $this->price = $price;
        $this->fixedAmound = $fixedAmound;
        $this->percentage = $percentage;
        $this->totalCost = $totalCost;
        $this->totalCostWithoutReduction = $totalCostWithoutReduction;
        foreach ($reduction as $__value) {
            if (! $__value instanceof \BolCom\RetailerApi\Model\Commission\CommissionReduction) {
                throw new \InvalidArgumentException('reduction expected an array of BolCom\RetailerApi\Model\Commission\CommissionReduction');
            }
            $this->reduction[] = $__value;
        }
    }

    public function ean(): \BolCom\RetailerApi\Model\Offer\Ean
    {
        return $this->ean;
    }

    public function condition(): \BolCom\RetailerApi\Model\Offer\Condition
    {
        return $this->condition;
    }

    public function price(): \BolCom\RetailerApi\Model\CurrencyAmount
    {
        return $this->price;
    }

    public function fixedAmound(): \BolCom\RetailerApi\Model\CurrencyAmount
    {
        return $this->fixedAmound;
    }

    public function percentage(): float
    {
        return $this->percentage;
    }

    public function totalCost(): \BolCom\RetailerApi\Model\CurrencyAmount
    {
        return $this->totalCost;
    }

    public function totalCostWithoutReduction(): \BolCom\RetailerApi\Model\CurrencyAmount
    {
        return $this->totalCostWithoutReduction;
    }

    public function reduction(): array
    {
        return $this->reduction;
    }

    public function withEan(\BolCom\RetailerApi\Model\Offer\Ean $ean): Commission
    {
        return new self($ean, $this->condition, $this->price, $this->fixedAmound, $this->percentage, $this->totalCost, $this->totalCostWithoutReduction, $this->reduction);
    }

    public function withCondition(\BolCom\RetailerApi\Model\Offer\Condition $condition): Commission
    {
        return new self($this->ean, $condition, $this->price, $this->fixedAmound, $this->percentage, $this->totalCost, $this->totalCostWithoutReduction, $this->reduction);
    }

    public function withPrice(\BolCom\RetailerApi\Model\CurrencyAmount $price): Commission
    {
        return new self($this->ean, $this->condition, $price, $this->fixedAmound, $this->percentage, $this->totalCost, $this->totalCostWithoutReduction, $this->reduction);
    }

    public function withFixedAmound(\BolCom\RetailerApi\Model\CurrencyAmount $fixedAmound): Commission
    {
        return new self($this->ean, $this->condition, $this->price, $fixedAmound, $this->percentage, $this->totalCost, $this->totalCostWithoutReduction, $this->reduction);
    }

    public function withPercentage(float $percentage): Commission
    {
        return new self($this->ean, $this->condition, $this->price, $this->fixedAmound, $percentage, $this->totalCost, $this->totalCostWithoutReduction, $this->reduction);
    }

    public function withTotalCost(\BolCom\RetailerApi\Model\CurrencyAmount $totalCost): Commission
    {
        return new self($this->ean, $this->condition, $this->price, $this->fixedAmound, $this->percentage, $totalCost, $this->totalCostWithoutReduction, $this->reduction);
    }

    public function withTotalCostWithoutReduction(\BolCom\RetailerApi\Model\CurrencyAmount $totalCostWithoutReduction): Commission
    {
        return new self($this->ean, $this->condition, $this->price, $this->fixedAmound, $this->percentage, $this->totalCost, $totalCostWithoutReduction, $this->reduction);
    }

    public function withReduction(array $reduction): Commission
    {
        return new self($this->ean, $this->condition, $this->price, $this->fixedAmound, $this->percentage, $this->totalCost, $this->totalCostWithoutReduction, $reduction);
    }

    public static function fromArray(array $data): Commission
    {
        if (! isset($data['ean']) || ! \is_string($data['ean'])) {
            throw new \InvalidArgumentException("Key 'ean' is missing in data array or is not a string");
        }

        $ean = \BolCom\RetailerApi\Model\Offer\Ean::fromString($data['ean']);

        if (! isset($data['condition']) || ! \is_string($data['condition'])) {
            throw new \InvalidArgumentException("Key 'condition' is missing in data array or is not a string");
        }

        $condition = \BolCom\RetailerApi\Model\Offer\Condition::fromName($data['condition']);

        if (! isset($data['price']) || (! \is_float($data['price']) && ! \is_int($data['price']))) {
            throw new \InvalidArgumentException("Key 'price' is missing in data array or is not a float");
        }

        $price = \BolCom\RetailerApi\Model\CurrencyAmount::fromScalar($data['price']);

        if (! isset($data['fixedAmound']) || (! \is_float($data['fixedAmound']) && ! \is_int($data['fixedAmound']))) {
            throw new \InvalidArgumentException("Key 'fixedAmound' is missing in data array or is not a float");
        }

        $fixedAmound = \BolCom\RetailerApi\Model\CurrencyAmount::fromScalar($data['fixedAmound']);

        if (! isset($data['percentage']) || (! \is_float($data['percentage']) && ! \is_int($data['percentage']))) {
            throw new \InvalidArgumentException("Key 'percentage' is missing in data array or is not a float");
        }

        $percentage = $data['percentage'];

        if (! isset($data['totalCost']) || (! \is_float($data['totalCost']) && ! \is_int($data['totalCost']))) {
            throw new \InvalidArgumentException("Key 'totalCost' is missing in data array or is not a float");
        }

        $totalCost = \BolCom\RetailerApi\Model\CurrencyAmount::fromScalar($data['totalCost']);

        if (! isset($data['totalCostWithoutReduction']) || (! \is_float($data['totalCostWithoutReduction']) && ! \is_int($data['totalCostWithoutReduction']))) {
            throw new \InvalidArgumentException("Key 'totalCostWithoutReduction' is missing in data array or is not a float");
        }

        $totalCostWithoutReduction = \BolCom\RetailerApi\Model\CurrencyAmount::fromScalar($data['totalCostWithoutReduction']);

        if (! isset($data['reduction']) || ! \is_array($data['reduction'])) {
            throw new \InvalidArgumentException("Key 'reduction' is missing in data array or is not an array");
        }

        $reduction = [];

        foreach ($data['reduction'] as $__value) {
            if (! \is_array($data['reduction'])) {
                throw new \InvalidArgumentException("Key 'reduction' in data array or is not an array of arrays");
            }

            $reduction[] = CommissionReduction::fromArray($__value);
        }

        return new self(
            $ean,
            $condition,
            $price,
            $fixedAmound,
            $percentage,
            $totalCost,
            $totalCostWithoutReduction,
            $reduction
        );
    }
}
