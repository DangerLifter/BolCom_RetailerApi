<?php

// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\Commission;

final class CommissionQuery
{
    private $ean;
    private $condition;
    private $price;

    public function __construct(\BolCom\RetailerApi\Model\Offer\Ean $ean, \BolCom\RetailerApi\Model\Offer\Condition $condition, \BolCom\RetailerApi\Model\CurrencyAmount $price)
    {
        $this->ean = $ean;
        $this->condition = $condition;
        $this->price = $price;
    }

    public function ean(): \BolCom\RetailerApi\Model\Offer\Ean
    {
        return $this->ean;
    }

    public function condition(): \BolCom\RetailerApi\Model\Offer\Condition
    {
        return $this->condition;
    }

    public function price(): \BolCom\RetailerApi\Model\CurrencyAmount
    {
        return $this->price;
    }

    public function withEan(\BolCom\RetailerApi\Model\Offer\Ean $ean): CommissionQuery
    {
        return new self($ean, $this->condition, $this->price);
    }

    public function withCondition(\BolCom\RetailerApi\Model\Offer\Condition $condition): CommissionQuery
    {
        return new self($this->ean, $condition, $this->price);
    }

    public function withPrice(\BolCom\RetailerApi\Model\CurrencyAmount $price): CommissionQuery
    {
        return new self($this->ean, $this->condition, $price);
    }

    public static function fromArray(array $data): CommissionQuery
    {
        if (! isset($data['ean']) || ! \is_string($data['ean'])) {
            throw new \InvalidArgumentException("Key 'ean' is missing in data array or is not a string");
        }

        $ean = \BolCom\RetailerApi\Model\Offer\Ean::fromString($data['ean']);

        if (! isset($data['condition']) || ! \is_string($data['condition'])) {
            throw new \InvalidArgumentException("Key 'condition' is missing in data array or is not a string");
        }

        $condition = \BolCom\RetailerApi\Model\Offer\Condition::fromName($data['condition']);

        if (! isset($data['price']) || (! \is_float($data['price']) && ! \is_int($data['price']))) {
            throw new \InvalidArgumentException("Key 'price' is missing in data array or is not a float");
        }

        $price = \BolCom\RetailerApi\Model\CurrencyAmount::fromScalar($data['price']);

        return new self(
            $ean,
            $condition,
            $price
        );
    }
}
