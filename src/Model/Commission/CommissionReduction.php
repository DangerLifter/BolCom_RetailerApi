<?php

// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\Commission;

final class CommissionReduction
{
    private $maximumPrice;
    private $costReduction;
    private $startDate;
    private $endDate;

    public function __construct(\BolCom\RetailerApi\Model\CurrencyAmount $maximumPrice, \BolCom\RetailerApi\Model\CurrencyAmount $costReduction, \BolCom\RetailerApi\Model\Date $startDate, \BolCom\RetailerApi\Model\Date $endDate)
    {
        $this->maximumPrice = $maximumPrice;
        $this->costReduction = $costReduction;
        $this->startDate = $startDate;
        $this->endDate = $endDate;
    }

    public function maximumPrice(): \BolCom\RetailerApi\Model\CurrencyAmount
    {
        return $this->maximumPrice;
    }

    public function costReduction(): \BolCom\RetailerApi\Model\CurrencyAmount
    {
        return $this->costReduction;
    }

    public function startDate(): \BolCom\RetailerApi\Model\Date
    {
        return $this->startDate;
    }

    public function endDate(): \BolCom\RetailerApi\Model\Date
    {
        return $this->endDate;
    }

    public function withMaximumPrice(\BolCom\RetailerApi\Model\CurrencyAmount $maximumPrice): CommissionReduction
    {
        return new self($maximumPrice, $this->costReduction, $this->startDate, $this->endDate);
    }

    public function withCostReduction(\BolCom\RetailerApi\Model\CurrencyAmount $costReduction): CommissionReduction
    {
        return new self($this->maximumPrice, $costReduction, $this->startDate, $this->endDate);
    }

    public function withStartDate(\BolCom\RetailerApi\Model\Date $startDate): CommissionReduction
    {
        return new self($this->maximumPrice, $this->costReduction, $startDate, $this->endDate);
    }

    public function withEndDate(\BolCom\RetailerApi\Model\Date $endDate): CommissionReduction
    {
        return new self($this->maximumPrice, $this->costReduction, $this->startDate, $endDate);
    }

    public static function fromArray(array $data): CommissionReduction
    {
        if (! isset($data['maximumPrice']) || (! \is_float($data['maximumPrice']) && ! \is_int($data['maximumPrice']))) {
            throw new \InvalidArgumentException("Key 'maximumPrice' is missing in data array or is not a float");
        }

        $maximumPrice = \BolCom\RetailerApi\Model\CurrencyAmount::fromScalar($data['maximumPrice']);

        if (! isset($data['costReduction']) || (! \is_float($data['costReduction']) && ! \is_int($data['costReduction']))) {
            throw new \InvalidArgumentException("Key 'costReduction' is missing in data array or is not a float");
        }

        $costReduction = \BolCom\RetailerApi\Model\CurrencyAmount::fromScalar($data['costReduction']);

        if (! isset($data['startDate']) || ! \is_string($data['startDate'])) {
            throw new \InvalidArgumentException("Key 'startDate' is missing in data array or is not a string");
        }

        $startDate = \BolCom\RetailerApi\Model\Date::fromString($data['startDate']);

        if (! isset($data['endDate']) || ! \is_string($data['endDate'])) {
            throw new \InvalidArgumentException("Key 'endDate' is missing in data array or is not a string");
        }

        $endDate = \BolCom\RetailerApi\Model\Date::fromString($data['endDate']);

        return new self(
            $maximumPrice,
            $costReduction,
            $startDate,
            $endDate
        );
    }
}
