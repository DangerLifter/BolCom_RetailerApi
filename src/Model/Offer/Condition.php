<?php

// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\Offer;

final class Condition
{
    public const OPTIONS = [
        'IsNew' => 'NEW',
        'AsNew' => 'AS_NEW',
        'Good' => 'GOOD',
        'Reasonable' => 'REASONABLE',
        'Moderate' => 'MODERATE',
    ];

    public const IsNew = 'NEW';
    public const AsNew = 'AS_NEW';
    public const Good = 'GOOD';
    public const Reasonable = 'REASONABLE';
    public const Moderate = 'MODERATE';

    private $name;
    private $value;

    private function __construct(string $name)
    {
        $this->name = $name;
        $this->value = self::OPTIONS[$name];
    }

    public static function isNew(): self
    {
        return new self('IsNew');
    }

    public static function asNew(): self
    {
        return new self('AsNew');
    }

    public static function good(): self
    {
        return new self('Good');
    }

    public static function reasonable(): self
    {
        return new self('Reasonable');
    }

    public static function moderate(): self
    {
        return new self('Moderate');
    }

    public static function fromName(string $value): self
    {
        if (! isset(self::OPTIONS[$value])) {
            throw new \InvalidArgumentException('Unknown enum name given');
        }

        return self::{$value}();
    }

    public static function fromValue($value): self
    {
        foreach (self::OPTIONS as $name => $v) {
            if ($v === $value) {
                return self::{$name}();
            }
        }

        throw new \InvalidArgumentException('Unknown enum value given');
    }

    public function equals(Condition $other): bool
    {
        return \get_class($this) === \get_class($other) && $this->name === $other->name;
    }

    public function name(): string
    {
        return $this->name;
    }

    public function value()
    {
        return $this->value;
    }

    public function __toString(): string
    {
        return $this->name;
    }

    public function toString(): string
    {
        return $this->name;
    }
}
