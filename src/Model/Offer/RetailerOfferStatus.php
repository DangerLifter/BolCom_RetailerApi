<?php

// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\Offer;

final class RetailerOfferStatus
{
    private $valid;
    private $errorCode;
    private $errorMessage;

    public function __construct(bool $valid, string $errorCode, string $errorMessage)
    {
        $this->valid = $valid;
        $this->errorCode = $errorCode;
        $this->errorMessage = $errorMessage;
    }

    public function valid(): bool
    {
        return $this->valid;
    }

    public function errorCode(): string
    {
        return $this->errorCode;
    }

    public function errorMessage(): string
    {
        return $this->errorMessage;
    }

    public function withValid(bool $valid): RetailerOfferStatus
    {
        return new self($valid, $this->errorCode, $this->errorMessage);
    }

    public function withErrorCode(string $errorCode): RetailerOfferStatus
    {
        return new self($this->valid, $errorCode, $this->errorMessage);
    }

    public function withErrorMessage(string $errorMessage): RetailerOfferStatus
    {
        return new self($this->valid, $this->errorCode, $errorMessage);
    }

    public static function fromArray(array $data): RetailerOfferStatus
    {
        if (! isset($data['valid']) || ! \is_bool($data['valid'])) {
            throw new \InvalidArgumentException("Key 'valid' is missing in data array or is not a bool");
        }

        $valid = $data['valid'];

        if (! isset($data['errorCode']) || ! \is_string($data['errorCode'])) {
            throw new \InvalidArgumentException("Key 'errorCode' is missing in data array or is not a string");
        }

        $errorCode = $data['errorCode'];

        if (! isset($data['errorMessage']) || ! \is_string($data['errorMessage'])) {
            throw new \InvalidArgumentException("Key 'errorMessage' is missing in data array or is not a string");
        }

        $errorMessage = $data['errorMessage'];

        return new self(
            $valid,
            $errorCode,
            $errorMessage
        );
    }
}
